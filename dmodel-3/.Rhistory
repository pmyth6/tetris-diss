theta_y = rnorm(1, theta, sqrt(tvar))
phi_y = rnorm(1, phi, sqrt(phvar))
if (phi_y >0){
u = runif(1, 0, 1)
logalpha = alpha(theta, theta_y, phi, phi_y)
if (log(u) < logalpha){
theta = theta_y
phi = phi_y
a_T = a_T +1
a_PH = a_PH +1
}
}
THETA[i] = theta
PHI[i] = phi
}
return(list(T = THETA, PH = PHI, aT = a_T/count, aPH = a_PH/count))
}
S = MH(1, 2, 0.25, 1, 10000)
par(mfrow=c(3,2))
par(mar = c(2, 2, 2, 2))
ts.plot(S$T)
ts.plot(S$PH)
hist(S$T)
hist(S$PH)
acf(S$T)
acf(S$PH)
data = read.csv("log.csv")
setwd("~/Documents/Uni/Year 4/Dissertation/tetris-diss/tetris-diss/no-UI")
data = read.csv("log.csv")
#Plot the score for each game
plot(seq(1,length(data$game.no.),1), data$score, xlab = "move", ylab = "score")
barplot(table(data$move))
#Looking at the distribution of moves
table(data$move)
#Correct data - game number starts from zero again halfway through
which(data$game.no. == 0)
#Correct data - game number starts from zero again halfway through
ind = which(data$game.no. == 0)
ind = ind[5]
max.game = max(data$game.no.)
which(data$game.no. == max.game)
max.game.1 = data$game.no.[ind-1]
no.obs = length(data$game.no.)
data$game.no.[ind:no.obs] = data$game.no.[ind:no.obs] + max.game.1
max(data$game.no.)
max.game = max(data$game.no.)
#Game Duration (No. moves per game)
count.game.duration = function(data){
max.game = max(data$game.no.)
move.count = matrix(0, max.game, 1)
total.moves = length(data[,1])
game.count = 0
for (i in 1:total.moves){
if (data$game.no.[i] == game.count){
move.count[data$game.no.[i]+1] = move.count[data$game.no.[i]+1]+1
}
else {
game.count = game.count +1
move.count[data$game.no.[i]+1] = move.count[data$game.no.[i]+1]+1
}
}
return(count = move.count)
}
game.dur = count.game.duration(data)
plot(seq(1,max.game+1,1), game.dur, type="l", xlab="game number",
ylab="number of moves")
#Ratio of vertical:horizontal moves per game
count.ratio = function(data){
max.game = max(data$game.no.)
h.count = matrix(0, max.game+1, 1)
v.count = matrix(0, max.game+1, 1)
total.moves = length(data[,1])
game.count = 0
for (i in 1:total.moves){
if (data$game.no.[i] == game.count){
if (substr(data$move[i], 1, 1) == "h"){
h.count[data$game.no.[i]+1] = h.count[data$game.no.[i]+1]+1
}
if (substr(data$move[i], 1, 1) == "v"){
v.count[data$game.no.[i]+1] = v.count[data$game.no.[i]+1]+1
}
}
else {
game.count = game.count +1
if (substr(data$move[i], 1, 1) == "h"){
h.count[data$game.no.[i]+1] = h.count[data$game.no.[i]+1]+1
}
if (substr(data$move[i], 1, 1) == "v"){
v.count[data$game.no.[i]+1] = v.count[data$game.no.[i]+1]+1
}
}
}
return(list(hcount = h.count, vcount = v.count, max.game = max.game))
}
#Ratio of vertical:horizontal moves per game
count.ratio = function(data){
max.game = max(data$game.no.)
h.count = matrix(0, max.game+1, 1)
v.count = matrix(0, max.game+1, 1)
total.moves = length(data[,1])
game.count = 0
for (i in 1:total.moves){
if (data$game.no.[i] == game.count){
if (substr(data$move[i], 1, 1) == "h"){
h.count[data$game.no.[i]+1] = h.count[data$game.no.[i]+1]+1
}
if (substr(data$move[i], 1, 1) == "v"){
v.count[data$game.no.[i]+1] = v.count[data$game.no.[i]+1]+1
}
}
else {
game.count = game.count +1
if (substr(data$move[i], 1, 1) == "h"){
h.count[data$game.no.[i]+1] = h.count[data$game.no.[i]+1]+1
}
if (substr(data$move[i], 1, 1) == "v"){
v.count[data$game.no.[i]+1] = v.count[data$game.no.[i]+1]+1
}
}
}
return(list(hcount = h.count, vcount = v.count, max.game = max.game))
}
ratio = count.ratio(data)
plot(seq(1,max.game+1,1), ratio$vcount/game.dur, type="l", xlab="game number",
ylab="ratio v/total", ylim=c(0,1))
#PACKAGES
library(reshape2)
#LOAD DATA
ratings.train <- read.csv("ratings_train.csv", header=TRUE)
setwd("~/Documents/Uni/Year 4/Statistical Machine Learning/Spring/movies")
#PACKAGES
library(reshape2)
#LOAD DATA
ratings.train <- read.csv("ratings_train.csv", header=TRUE)
ratings.test <- read.csv("ratings_test.csv", header=TRUE)
movie.info = read.csv("movies.csv", header=TRUE)
head(ratings.train)
#PREDICTION FORMAT
X <- acast(ratings.train, userId ~ movieId, value.var="rating")
print(X)
user.ids <- sort(unique(ratings.train$userId))
movie.ids <- sort(unique(ratings.train$movieId))
num.test <- dim(ratings.test)[1]
predictions <- matrix(NA, num.test, 1)
for (i in 1:num.test){
if (!any(movie.ids==ratings.test[i,]$movieId)){ # if film does not arise in training set
predictions[i] <- 3
}
else
{ # if film does arise in training set
movie.i.col.ind <- which(movie.ids==ratings.test[i,]$movieId)
predictions[i] <- mean(X[,movie.i.col.ind],na.rm=TRUE)
}
}
write.csv(predictions, file = "film_rating_predictions_group_F_week_1.csv", row.names=FALSE)
#EDA
#671 users and 8090 movies total
#Plot movie ratings
user.ids <- sort(unique(ratings.train$userId))
movie.ids <- sort(unique(ratings.train$movieId))
map = setNames(seq_along(movie.ids), movie.ids)
ratings.train$movieId = map[as.character(ratings.train$movieId)]
plot(ratings.train$movieId, ratings.train$rating)
userIndex = which(ratings.train$userId <= 3)
plot(ratings.train$movieId[userIndex], ratings.train$rating[userIndex],
col=ratings.train$userId[userIndex], xlab="Movie ID", ylab="Rating")
ratings.train <- read.csv("ratings_train.csv", header=TRUE)
ratings.test <- read.csv("ratings_test.csv", header=TRUE)
movie.info = read.csv("movies.csv", header=TRUE)
max(ratings.train$movieId)
max(movie.info$movieId)
?inner_join
#PACKAGES
library(reshape2)
library(reshape2)
library(dplyr)
library(ggplot2)
library(stringr)
?inner_join
?arrange
movies.train = read.csv("ratings_train.csv", header=TRUE)
movies.test = read.csv("ratings_test.csv", header=TRUE)
movie.info = read.csv("movies.csv", header=TRUE)
#TEXT EXTRACTION
movies.train = arrange(movies.train, movieId)
rm(movie.info)
movies.info = read.csv("movies.csv", header=TRUE)
movies = left_join(movies.train, movies.info)
?select
year <- str_extract(movies$title, "\\(\\d{4}\\)")  # Extracts (YYYY)
year
year[72753]
year[72754]
year[72752]
max(movies$movieId)
year <- str_replace_all(year, "[()]", "")   # Removes parentheses
year = as.integer(year)
movies$title = year
which(movies$title == NA)
rename(movies, year = title)
movies = rename(movies, year = title)
movies <- movies %>%
mutate(genres = as.integer(factor(genres, levels = unique(genres))))
# Select a specific user (change user_id as needed)
user_id <- 1
user_data <- movies %>% filter(userId == user_id)
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = genres)) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Year of Release",
y = "Rating",
color = "Genres"
) +
theme_minimal() +  # Use a clean theme
scale_color_manual(values = rainbow(length(unique(user_data$genres))))
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = genres)) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Year of Release",
y = "Rating",
color = "Genres"
) +
theme_minimal() +  # Use a clean theme
scale_color_manual(values = rainbow(user_data$genres))
rlang::last_trace()
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = genres)) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
) +
theme_minimal()  # Use a clean theme
# Set colours for the genres
# Define a distinct color palette for genres
num_genres <- length(unique(movies$genres))
genre_colors <- brewer.pal(min(num_genres, 9), "Set1")  # Use 'Set1' for distinct colors
library(RColorBrewer)
# Set colours for the genres
# Define a distinct color palette for genres
num_genres <- length(unique(movies$genres))
genre_colors <- brewer.pal(min(num_genres, 9), "Set1")  # Use 'Set1' for distinct colors
# Ensure colors work for more than 9 genres (extend with other palettes if needed)
if (num_genres > 9) {
extra_colors <- brewer.pal(num_genres, "Paired")
genre_colors <- c(genre_colors, extra_colors[1:(num_genres - length(genre_colors))])
}
# Select a specific user (change user_id as needed)
user_id <- 1
user_data <- movies %>% filter(userId == user_id)
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = genres)) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
) +
theme_minimal() + # Use a clean theme
scale_color_manual(values = genre_colors)
# PACKAGES
library(reshape2)
library(dplyr)
library(ggplot2)
library(stringr)
# LOAD DATA
movies.train = read.csv("ratings_train.csv", header=TRUE)
movies.test = read.csv("ratings_test.csv", header=TRUE)
movies.info = read.csv("movies.csv", header=TRUE)
# TEXT EXTRACTION
movies.train = arrange(movies.train, movieId)
movies = left_join(movies.train, movies.info)
# Extract the year of the movie
year = str_extract(movies$title, "\\(\\d{4}\\)")  # Extracts (YYYY)
year = str_replace_all(year, "[()]", "")   # Removes parentheses
year = as.integer(year) # Convert to integer
movies$title = year
movies = rename(movies, year = title)
# Extract the genre of the movie
# Assign a unique number to each unique genre combination
movies <- movies %>%
mutate(genres = as.integer(factor(genres, levels = unique(genres))))
# Select a specific user (change user_id as needed)
user_id <- 1
user_data <- movies %>% filter(userId == user_id)
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = genres)) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
)
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = factor(genres))) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
) +
scale_color_manual(values = rainbow(length(user_data$genres))[length(user_data$genres):1])
user_id <- 2
user_data <- movies %>% filter(userId == user_id)
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = factor(genres))) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
) +
scale_color_manual(values = rainbow(length(user_data$genres))[length(user_data$genres):1])
user_id <- 3
user_data <- movies %>% filter(userId == user_id)
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = factor(genres))) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
) +
scale_color_manual(values = rainbow(length(user_data$genres))[length(user_data$genres):1])
user_id <- 4
user_data <- movies %>% filter(userId == user_id)
# Plot ratings over time with color-coded genres
ggplot(user_data, aes(x = movieId, y = rating, color = factor(genres))) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
) +
scale_color_manual(values = rainbow(length(user_data$genres))[length(user_data$genres):1])
max(movies$genres)
# Plot ratings against genre
ggplot(user_data, aes(x = genres, y = rating, color = factor(genres))) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Movie Id",
y = "Rating",
color = "Genre"
) +
scale_color_manual(values = rainbow(length(user_data$genres))[length(user_data$genres):1]) +
theme(legend.position = "none")
# Plot ratings against genre
ggplot(user_data, aes(x = genres, y = rating, color = factor(genres))) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Genre",
y = "Rating",
color = "Genre"
) +
scale_color_manual(values = rainbow(length(user_data$genres))[length(user_data$genres):1]) +
theme(legend.position = "none")
# Plot ratings against genre
ggplot(user_data, aes(x = genres, y = rating)) +
geom_point(size = 3) +  # Adjust point size
labs(
title = paste("Ratings of User", user_id),
x = "Genre",
y = "Rating",
color = "Genre"
) +
theme(legend.position = "none")
setwd("~/Documents/Uni/Year 4/Dissertation/tetris-diss/tetris-diss/dmodel-3")
data = read.csv("log.csv")
#Calculate the average score over every (39,500-40,000) moves
obs = length(data)
#Calculate the average score over every (39,500-40,000) moves
obs = length(data$game.no.)
#Calculate the average score over every (39,500-40,000) moves
obs = length(data[1])
#Calculate the average score over every (39,500-40,000) moves
obs = length(data[1,])
#Calculate the average score over every (39,500-40,000) moves
obs = length(data[,1])
2*39500
2*40000
?trunc
floor(3.7)
obs = 136471
ind = 40000
iter = floor(obs/ind)
data$score[1]
data$score[1:3]
seq(1, obs, 1)
x =seq(1, obs, 1)
x[3*ind-500:3*ind]
?count
?which
data = read.csv("~/Documents/Uni/Year 4/Dissertation/tetris-diss/logs/log_fixedloss_14hr20.csv")
#Calculate the average score over every (39,500-40,000) moves
obs = length(data[,1])
ind = 40000
iter = floor(obs/ind)
av.score = 0
for (i in 1:iter){
av.score[i] = mean(data$score[i*ind-500:i*ind])
}
#Calculate the v-h ratio and no. gaps over every (39,500-40,000) moves
av.ratio = 0
gaps = 0
for (i in 1:iter){
v = 0
g = 0
for (j in i*ind-500:i*ind){
if (substr(data$move[j], 1, 1) == "v"){
v = v+1
}
g = g + data$gap.left[j]
}
av.ratio[i] = v/500
gaps[i] = g
}
data = read.csv("~/Documents/Uni/Year 4/Dissertation/tetris-diss/logs/log_1_X.csv")
data = read.csv("~/Documents/Uni/Year 4/Dissertation/tetris-diss/logs/log20hr21punishgaps.csv")
#Calculate the average score over every (39,500-40,000) moves
obs = length(data[,1])
ind = 40000
iter = floor(obs/ind)
av.score = 0
for (i in 1:iter){
av.score[i] = mean(data$score[i*ind-500:i*ind])
}
#Calculate the v-h ratio and no. gaps over every (39,500-40,000) moves
av.ratio = 0
gaps = 0
for (i in 1:iter){
v = 0
g = 0
for (j in i*ind-500:i*ind){
if (substr(data$move[j], 1, 1) == "v"){
v = v+1
}
g = g + data$gap.left[j]
}
av.ratio[i] = v/500
gaps[i] = g
}
plot(seq(1,iter,1), av.score, type="l", xlab="40,000 interval no.",
ylab="average score", main="average score over 500 moves every 40,000 moves")
data = read.csv("~/Documents/Uni/Year 4/Dissertation/tetris-diss/logs/log20hr21punishgaps.csv")
#Calculate the average score over every (39,500-40,000) moves
obs = length(data[,1])
ind = 40000
iter = floor(obs/ind)
av.score = 0
for (i in 1:iter){
av.score[i] = mean(data$score[i*ind-500:i*ind])
}
mean(data$score[1*ind-500:1*ind])
mean(data$score[2*ind-500:2*ind])
data = read.csv("~/Documents/Uni/Year 4/Dissertation/tetris-diss/tetris-diss/no-UI/log.csv")
#Calculate the average score over every (39,500-40,000) moves
obs = length(data[,1])
ind = 40000
iter = floor(obs/ind)
av.score = 0
for (i in 1:iter){
av.score[i] = mean(data$score[i*ind-500:i*ind])
}
#Calculate the v-h ratio and no. gaps over every (39,500-40,000) moves
av.ratio = 0
gaps = 0
for (i in 1:iter){
v = 0
g = 0
for (j in i*ind-500:i*ind){
if (substr(data$move[j], 1, 1) == "v"){
v = v+1
}
g = g + data$gap.left[j]
}
av.ratio[i] = v/500
gaps[i] = g
}
substr(data$move[j], 1, 1)
substr(data$move[2], 1, 1)
substr(data$move[2], 1, 1) == "v"
substr(data$move[2], 1, 1) == "h"
1*ind-500
substr(data$move[39500], 1, 1) == "h"
if (substr(data$move[39500], 1, 1) == "v"){print(yes)}
if (substr(data$move[39500], 1, 1) == "v"){print("yes")}
if (substr(data$move[39501], 1, 1) == "v"){print("yes")}
if (substr(data$move[39502], 1, 1) == "v"){print("yes")}
for (j in 1:3){if (substr(data$move[39502], 1, 1) == "v"){print("yes")}}
for (j in 1:3){if (substr(data$move[39502], 1, 1) == "v"){v=v+1}}
plot(seq(1,iter,1), av.score, xlab="40,000 interval no.",
ylab="average score", main="average score over 500 moves every 40,000 moves")
for (i in 1:iter){print(i)}
mean(data$score[1*ind-500:1*ind])
mean(data$score[54*ind-500:54*ind])
for (i in 54*ind-500:54*ind){print(data$score[i])}
for (i in 54*ind-500:54*ind){gaps = gaps+data$score[i]}
warnings()
